/* libadwaita-1.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Adw", gir_namespace = "Adw", gir_version = "1", lower_case_cprefix = "adw_")]
namespace Adw {
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_action_row_get_type ()")]
	public class ActionRow : Adw.PreferencesRow, Gtk.Accessible, Gtk.Actionable, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "1.0")]
		public ActionRow ();
		public virtual void activate ();
		[Version (since = "1.0")]
		public void add_prefix (Gtk.Widget widget);
		[Version (since = "1.0")]
		public void add_suffix (Gtk.Widget widget);
		[Version (since = "1.0")]
		public unowned Gtk.Widget? get_activatable_widget ();
		[Version (since = "1.0")]
		public unowned string get_icon_name ();
		[Version (since = "1.0")]
		public unowned string? get_subtitle ();
		[Version (since = "1.0")]
		public int get_subtitle_lines ();
		[Version (since = "1.0")]
		public int get_title_lines ();
		[Version (since = "1.0")]
		public bool get_use_underline ();
		[Version (since = "1.0")]
		public void remove (Gtk.Widget widget);
		[Version (since = "1.0")]
		public void set_activatable_widget (Gtk.Widget? widget);
		[Version (since = "1.0")]
		public void set_icon_name (string icon_name);
		[Version (since = "1.0")]
		public void set_subtitle (string? subtitle);
		[Version (since = "1.0")]
		public void set_subtitle_lines (int subtitle_lines);
		[Version (since = "1.0")]
		public void set_title_lines (int title_lines);
		[Version (since = "1.0")]
		public void set_use_underline (bool use_underline);
		[Version (since = "1.0")]
		public Gtk.Widget activatable_widget { get; set; }
		[Version (since = "1.0")]
		public string icon_name { get; set; }
		[Version (since = "1.0")]
		public string subtitle { get; set; }
		[Version (since = "1.0")]
		public int subtitle_lines { get; set; }
		[Version (since = "1.0")]
		public int title_lines { get; set; }
		[Version (since = "1.0")]
		public bool use_underline { get; set; }
		[Version (since = "1.0")]
		public signal void activated ();
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_application_window_get_type ()")]
	public class ApplicationWindow : Gtk.ApplicationWindow, GLib.ActionGroup, GLib.ActionMap, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Native, Gtk.Root, Gtk.ShortcutManager {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "1.0")]
		public ApplicationWindow (Gtk.Application app);
		[Version (since = "1.0")]
		public unowned Gtk.Widget? get_child ();
		[Version (since = "1.0")]
		public void set_child (Gtk.Widget? child);
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_avatar_get_type ()")]
	public class Avatar : Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "1.0")]
		public Avatar (int size, string? text, bool show_initials);
		[Version (since = "1.0")]
		public Gdk.Pixbuf draw_to_pixbuf (int size, int scale_factor);
		[Version (since = "1.0")]
		public unowned string? get_icon_name ();
		[Version (since = "1.0")]
		public bool get_show_initials ();
		[Version (since = "1.0")]
		public int get_size ();
		[Version (since = "1.0")]
		public unowned string? get_text ();
		[Version (since = "1.0")]
		public void set_icon_name (string? icon_name);
		[Version (since = "1.0")]
		public void set_image_load_func (owned Adw.AvatarImageLoadFunc? load_image);
		[Version (since = "1.0")]
		public void set_show_initials (bool show_initials);
		[Version (since = "1.0")]
		public void set_size (int size);
		[Version (since = "1.0")]
		public void set_text (string? text);
		[Version (since = "1.0")]
		public string icon_name { get; set; }
		public bool show_initials { get; set; }
		[Version (since = "1.0")]
		public int size { get; set; }
		[Version (since = "1.0")]
		public string text { get; set; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_bin_get_type ()")]
	public class Bin : Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "1.0")]
		public Bin ();
		[Version (since = "1.0")]
		public unowned Gtk.Widget? get_child ();
		[Version (since = "1.0")]
		public void set_child (Gtk.Widget? child);
		[Version (since = "1.0")]
		public Gtk.Widget child { get; set; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_carousel_get_type ()")]
	public class Carousel : Gtk.Widget, Adw.Swipeable, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "1.0")]
		public Carousel ();
		[Version (since = "1.0")]
		public void append (Gtk.Widget child);
		[Version (since = "1.0")]
		public bool get_allow_long_swipes ();
		[Version (since = "1.0")]
		public bool get_allow_mouse_drag ();
		[Version (since = "1.0")]
		public uint get_animation_duration ();
		[Version (since = "1.0")]
		public bool get_interactive ();
		[Version (since = "1.0")]
		public uint get_n_pages ();
		[Version (since = "1.0")]
		public unowned Gtk.Widget get_nth_page (uint n);
		[Version (since = "1.0")]
		public double get_position ();
		[Version (since = "1.0")]
		public uint get_reveal_duration ();
		[Version (since = "1.0")]
		public uint get_spacing ();
		[Version (since = "1.0")]
		public void insert (Gtk.Widget child, int position);
		[Version (since = "1.0")]
		public void prepend (Gtk.Widget child);
		[Version (since = "1.0")]
		public void remove (Gtk.Widget child);
		[Version (since = "1.0")]
		public void reorder (Gtk.Widget child, int position);
		[Version (since = "1.0")]
		public void scroll_to (Gtk.Widget widget);
		[Version (since = "1.0")]
		public void scroll_to_full (Gtk.Widget widget, int64 duration);
		[Version (since = "1.0")]
		public void set_allow_long_swipes (bool allow_long_swipes);
		[Version (since = "1.0")]
		public void set_allow_mouse_drag (bool allow_mouse_drag);
		[Version (since = "1.0")]
		public void set_animation_duration (uint duration);
		[Version (since = "1.0")]
		public void set_interactive (bool interactive);
		[Version (since = "1.0")]
		public void set_reveal_duration (uint reveal_duration);
		[Version (since = "1.0")]
		public void set_spacing (uint spacing);
		[Version (since = "1.0")]
		public bool allow_long_swipes { get; set; }
		[Version (since = "1.0")]
		public bool allow_mouse_drag { get; set; }
		[Version (since = "1.0")]
		public uint animation_duration { get; set; }
		[Version (since = "1.0")]
		public bool interactive { get; set; }
		[Version (since = "1.0")]
		public uint n_pages { get; }
		[Version (since = "1.0")]
		public double position { get; }
		[Version (since = "1.0")]
		public uint reveal_duration { get; set; }
		[Version (since = "1.0")]
		public uint spacing { get; set; }
		[Version (since = "1.0")]
		public signal void page_changed (uint index);
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_carousel_indicator_dots_get_type ()")]
	public class CarouselIndicatorDots : Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "1.0")]
		public CarouselIndicatorDots ();
		[Version (since = "1.0")]
		public unowned Adw.Carousel? get_carousel ();
		[Version (since = "1.0")]
		public void set_carousel (Adw.Carousel? carousel);
		[Version (since = "1.0")]
		public Adw.Carousel carousel { get; set; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_carousel_indicator_lines_get_type ()")]
	public class CarouselIndicatorLines : Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "1.0")]
		public CarouselIndicatorLines ();
		[Version (since = "1.0")]
		public unowned Adw.Carousel? get_carousel ();
		[Version (since = "1.0")]
		public void set_carousel (Adw.Carousel? carousel);
		[Version (since = "1.0")]
		public Adw.Carousel carousel { get; set; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_clamp_get_type ()")]
	public class Clamp : Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "1.0")]
		public Clamp ();
		[Version (since = "1.0")]
		public unowned Gtk.Widget? get_child ();
		[Version (since = "1.0")]
		public int get_maximum_size ();
		[Version (since = "1.0")]
		public int get_tightening_threshold ();
		[Version (since = "1.0")]
		public void set_child (Gtk.Widget? child);
		[Version (since = "1.0")]
		public void set_maximum_size (int maximum_size);
		[Version (since = "1.0")]
		public void set_tightening_threshold (int tightening_threshold);
		public Gtk.Widget child { get; set; }
		[Version (since = "1.0")]
		public int maximum_size { get; set; }
		[Version (since = "1.0")]
		public int tightening_threshold { get; set; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_clamp_layout_get_type ()")]
	public class ClampLayout : Gtk.LayoutManager, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkLayoutManager*")]
		[Version (since = "1.0")]
		public ClampLayout ();
		[Version (since = "1.0")]
		public int get_maximum_size ();
		[Version (since = "1.0")]
		public int get_tightening_threshold ();
		[Version (since = "1.0")]
		public void set_maximum_size (int maximum_size);
		[Version (since = "1.0")]
		public void set_tightening_threshold (int tightening_threshold);
		[Version (since = "1.0")]
		public int maximum_size { get; set; }
		[Version (since = "1.0")]
		public int tightening_threshold { get; set; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_clamp_scrollable_get_type ()")]
	public class ClampScrollable : Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Orientable, Gtk.Scrollable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "1.0")]
		public ClampScrollable ();
		[Version (since = "1.0")]
		public unowned Gtk.Widget? get_child ();
		[Version (since = "1.0")]
		public int get_maximum_size ();
		[Version (since = "1.0")]
		public int get_tightening_threshold ();
		[Version (since = "1.0")]
		public void set_child (Gtk.Widget? child);
		[Version (since = "1.0")]
		public void set_maximum_size (int maximum_size);
		[Version (since = "1.0")]
		public void set_tightening_threshold (int tightening_threshold);
		public Gtk.Widget child { get; set; }
		[Version (since = "1.0")]
		public int maximum_size { get; set; }
		[Version (since = "1.0")]
		public int tightening_threshold { get; set; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_combo_row_get_type ()")]
	public class ComboRow : Adw.ActionRow, Gtk.Accessible, Gtk.Actionable, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "1.0")]
		public ComboRow ();
		[Version (since = "1.0")]
		public unowned Gtk.Expression? get_expression ();
		[Version (since = "1.0")]
		public unowned Gtk.ListItemFactory? get_factory ();
		[Version (since = "1.0")]
		public unowned Gtk.ListItemFactory? get_list_factory ();
		[Version (since = "1.0")]
		public unowned GLib.ListModel? get_model ();
		[Version (since = "1.0")]
		public uint get_selected ();
		[Version (since = "1.0")]
		public unowned GLib.Object? get_selected_item ();
		[Version (since = "1.0")]
		public bool get_use_subtitle ();
		[Version (since = "1.0")]
		public void set_expression (Gtk.Expression? expression);
		[Version (since = "1.0")]
		public void set_factory (Gtk.ListItemFactory? factory);
		[Version (since = "1.0")]
		public void set_list_factory (Gtk.ListItemFactory? factory);
		[Version (since = "1.0")]
		public void set_model (GLib.ListModel? model);
		[Version (since = "1.0")]
		public void set_selected (uint position);
		[Version (since = "1.0")]
		public void set_use_subtitle (bool use_subtitle);
		[Version (since = "1.0")]
		public Gtk.Expression expression { get; set; }
		[Version (since = "1.0")]
		public Gtk.ListItemFactory factory { get; set; }
		[Version (since = "1.0")]
		public Gtk.ListItemFactory list_factory { get; set; }
		[Version (since = "1.0")]
		public GLib.ListModel model { get; set; }
		[Version (since = "1.0")]
		public uint selected { get; set; }
		[Version (since = "1.0")]
		public GLib.Object selected_item { get; }
		[Version (since = "1.0")]
		public bool use_subtitle { get; set; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_enum_list_model_get_type ()")]
	public class EnumListModel : GLib.Object, GLib.ListModel {
		[CCode (has_construct_function = false)]
		public EnumListModel (GLib.Type enum_type);
		public uint find_position (int value);
		public GLib.Type get_enum_type ();
		public GLib.Type enum_type { get; construct; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_enum_value_object_get_type ()")]
	public class EnumValueObject : GLib.Object {
		[CCode (has_construct_function = false)]
		protected EnumValueObject ();
		public unowned string get_name ();
		public unowned string get_nick ();
		public int get_value ();
		public string name { get; }
		public string nick { get; }
		public int value { get; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_expander_row_get_type ()")]
	public class ExpanderRow : Adw.PreferencesRow, Gtk.Accessible, Gtk.Actionable, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "1.0")]
		public ExpanderRow ();
		public void add (Gtk.Widget child);
		[Version (since = "1.0")]
		public void add_action (Gtk.Widget widget);
		[Version (since = "1.0")]
		public void add_prefix (Gtk.Widget widget);
		[Version (since = "1.0")]
		public bool get_enable_expansion ();
		public bool get_expanded ();
		[Version (since = "1.0")]
		public unowned string get_icon_name ();
		[Version (since = "1.0")]
		public bool get_show_enable_switch ();
		[Version (since = "1.0")]
		public unowned string? get_subtitle ();
		[Version (since = "1.0")]
		public bool get_use_underline ();
		public void remove (Gtk.Widget child);
		[Version (since = "1.0")]
		public void set_enable_expansion (bool enable_expansion);
		public void set_expanded (bool expanded);
		[Version (since = "1.0")]
		public void set_icon_name (string icon_name);
		[Version (since = "1.0")]
		public void set_show_enable_switch (bool show_enable_switch);
		[Version (since = "1.0")]
		public void set_subtitle (string? subtitle);
		[Version (since = "1.0")]
		public void set_use_underline (bool use_underline);
		[Version (since = "1.0")]
		public bool enable_expansion { get; set; }
		[Version (since = "1.0")]
		public bool expanded { get; set; }
		[Version (since = "1.0")]
		public string icon_name { get; set; }
		[Version (since = "1.0")]
		public bool show_enable_switch { get; set; }
		[Version (since = "1.0")]
		public string subtitle { get; set; }
		[Version (since = "1.0")]
		public bool use_underline { get; set; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_flap_get_type ()")]
	public class Flap : Gtk.Widget, Adw.Swipeable, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "1.0")]
		public Flap ();
		[Version (since = "1.0")]
		public unowned Gtk.Widget? get_content ();
		[Version (since = "1.0")]
		public unowned Gtk.Widget? get_flap ();
		[Version (since = "1.0")]
		public Gtk.PackType get_flap_position ();
		[Version (since = "1.0")]
		public uint get_fold_duration ();
		[Version (since = "1.0")]
		public Adw.FlapFoldPolicy get_fold_policy ();
		[Version (since = "1.0")]
		public bool get_folded ();
		[Version (since = "1.0")]
		public bool get_locked ();
		[Version (since = "1.0")]
		public bool get_modal ();
		[Version (since = "1.0")]
		public uint get_reveal_duration ();
		[Version (since = "1.0")]
		public bool get_reveal_flap ();
		[Version (since = "1.0")]
		public double get_reveal_progress ();
		[Version (since = "1.0")]
		public unowned Gtk.Widget? get_separator ();
		[Version (since = "1.0")]
		public bool get_swipe_to_close ();
		[Version (since = "1.0")]
		public bool get_swipe_to_open ();
		[Version (since = "1.0")]
		public Adw.FlapTransitionType get_transition_type ();
		[Version (since = "1.0")]
		public void set_content (Gtk.Widget? content);
		[Version (since = "1.0")]
		public void set_flap (Gtk.Widget? flap);
		[Version (since = "1.0")]
		public void set_flap_position (Gtk.PackType position);
		[Version (since = "1.0")]
		public void set_fold_duration (uint duration);
		[Version (since = "1.0")]
		public void set_fold_policy (Adw.FlapFoldPolicy policy);
		[Version (since = "1.0")]
		public void set_locked (bool locked);
		[Version (since = "1.0")]
		public void set_modal (bool modal);
		[Version (since = "1.0")]
		public void set_reveal_duration (uint duration);
		[Version (since = "1.0")]
		public void set_reveal_flap (bool reveal_flap);
		[Version (since = "1.0")]
		public void set_separator (Gtk.Widget? separator);
		[Version (since = "1.0")]
		public void set_swipe_to_close (bool swipe_to_close);
		[Version (since = "1.0")]
		public void set_swipe_to_open (bool swipe_to_open);
		[Version (since = "1.0")]
		public void set_transition_type (Adw.FlapTransitionType transition_type);
		[Version (since = "1.0")]
		public Gtk.Widget content { get; set; }
		[Version (since = "1.0")]
		public Gtk.Widget flap { get; set; }
		[Version (since = "1.0")]
		public Gtk.PackType flap_position { get; set; }
		[Version (since = "1.0")]
		public uint fold_duration { get; set; }
		[Version (since = "1.0")]
		public Adw.FlapFoldPolicy fold_policy { get; set; }
		[Version (since = "1.0")]
		public bool folded { get; }
		[Version (since = "1.0")]
		public bool locked { get; set; }
		[Version (since = "1.0")]
		public bool modal { get; set; }
		[Version (since = "1.0")]
		public uint reveal_duration { get; set; }
		[Version (since = "1.0")]
		public bool reveal_flap { get; set; }
		[Version (since = "1.0")]
		public double reveal_progress { get; }
		[Version (since = "1.0")]
		public Gtk.Widget separator { get; set; }
		[Version (since = "1.0")]
		public bool swipe_to_close { get; set; }
		[Version (since = "1.0")]
		public bool swipe_to_open { get; set; }
		[Version (since = "1.0")]
		public Adw.FlapTransitionType transition_type { get; set; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_header_bar_get_type ()")]
	public class HeaderBar : Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "1.0")]
		public HeaderBar ();
		[Version (since = "1.0")]
		public Adw.CenteringPolicy get_centering_policy ();
		[Version (since = "1.0")]
		public unowned string? get_decoration_layout ();
		[Version (since = "1.0")]
		public bool get_show_end_title_buttons ();
		[Version (since = "1.0")]
		public bool get_show_start_title_buttons ();
		[Version (since = "1.0")]
		public unowned Gtk.Widget? get_title_widget ();
		[Version (since = "1.0")]
		public void pack_end (Gtk.Widget child);
		[Version (since = "1.0")]
		public void pack_start (Gtk.Widget child);
		[Version (since = "1.0")]
		public void remove (Gtk.Widget child);
		[Version (since = "1.0")]
		public void set_centering_policy (Adw.CenteringPolicy centering_policy);
		[Version (since = "1.0")]
		public void set_decoration_layout (string? layout);
		[Version (since = "1.0")]
		public void set_show_end_title_buttons (bool setting);
		[Version (since = "1.0")]
		public void set_show_start_title_buttons (bool setting);
		[Version (since = "1.0")]
		public void set_title_widget (Gtk.Widget? title_widget);
		public Adw.CenteringPolicy centering_policy { get; set; }
		[Version (since = "1.0")]
		public string decoration_layout { get; set; }
		[Version (since = "1.0")]
		public bool show_end_title_buttons { get; set; }
		[Version (since = "1.0")]
		public bool show_start_title_buttons { get; set; }
		public Gtk.Widget title_widget { get; set; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_leaflet_get_type ()")]
	public class Leaflet : Gtk.Widget, Adw.Swipeable, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Leaflet ();
		[Version (since = "1.0")]
		public unowned Adw.LeafletPage append (Gtk.Widget child);
		[Version (since = "1.0")]
		public unowned Gtk.Widget? get_adjacent_child (Adw.NavigationDirection direction);
		[Version (since = "1.0")]
		public bool get_can_swipe_back ();
		[Version (since = "1.0")]
		public bool get_can_swipe_forward ();
		public bool get_can_unfold ();
		[Version (since = "1.0")]
		public unowned Gtk.Widget? get_child_by_name (string name);
		[Version (since = "1.0")]
		public uint get_child_transition_duration ();
		[Version (since = "1.0")]
		public bool get_child_transition_running ();
		[Version (since = "1.0")]
		public bool get_folded ();
		[Version (since = "1.0")]
		public bool get_homogeneous (bool folded, Gtk.Orientation orientation);
		[Version (since = "1.0")]
		public bool get_interpolate_size ();
		[Version (since = "1.0")]
		public uint get_mode_transition_duration ();
		[Version (since = "1.0")]
		public unowned Adw.LeafletPage get_page (Gtk.Widget child);
		[Version (since = "1.0")]
		public Gtk.SelectionModel get_pages ();
		[Version (since = "1.0")]
		public Adw.LeafletTransitionType get_transition_type ();
		[Version (since = "1.0")]
		public unowned Gtk.Widget get_visible_child ();
		[Version (since = "1.0")]
		public unowned string get_visible_child_name ();
		[Version (since = "1.0")]
		public unowned Adw.LeafletPage insert_child_after (Gtk.Widget child, Gtk.Widget? sibling);
		[Version (since = "1.0")]
		public bool navigate (Adw.NavigationDirection direction);
		[Version (since = "1.0")]
		public unowned Adw.LeafletPage prepend (Gtk.Widget child);
		[Version (since = "1.0")]
		public void remove (Gtk.Widget child);
		[Version (since = "1.0")]
		public void reorder_child_after (Gtk.Widget child, Gtk.Widget? sibling);
		[Version (since = "1.0")]
		public void set_can_swipe_back (bool can_swipe_back);
		[Version (since = "1.0")]
		public void set_can_swipe_forward (bool can_swipe_forward);
		public void set_can_unfold (bool can_unfold);
		[Version (since = "1.0")]
		public void set_child_transition_duration (uint duration);
		[Version (since = "1.0")]
		public void set_homogeneous (bool folded, Gtk.Orientation orientation, bool homogeneous);
		[Version (since = "1.0")]
		public void set_interpolate_size (bool interpolate_size);
		[Version (since = "1.0")]
		public void set_mode_transition_duration (uint duration);
		[Version (since = "1.0")]
		public void set_transition_type (Adw.LeafletTransitionType transition);
		[Version (since = "1.0")]
		public void set_visible_child (Gtk.Widget visible_child);
		[Version (since = "1.0")]
		public void set_visible_child_name (string name);
		[Version (since = "1.0")]
		public bool can_swipe_back { get; set; }
		[Version (since = "1.0")]
		public bool can_swipe_forward { get; set; }
		public bool can_unfold { get; set; }
		public uint child_transition_duration { get; set; }
		public bool child_transition_running { get; }
		[Version (since = "1.0")]
		public bool folded { get; }
		[NoAccessorMethod]
		public bool hhomogeneous_folded { get; set; }
		[NoAccessorMethod]
		public bool hhomogeneous_unfolded { get; set; }
		public bool interpolate_size { get; set; }
		public uint mode_transition_duration { get; set; }
		public Gtk.SelectionModel pages { owned get; }
		[Version (since = "1.0")]
		public Adw.LeafletTransitionType transition_type { get; set; }
		[NoAccessorMethod]
		public bool vhomogeneous_folded { get; set; }
		[NoAccessorMethod]
		public bool vhomogeneous_unfolded { get; set; }
		public Gtk.Widget visible_child { get; set; }
		public string visible_child_name { get; set; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_leaflet_page_get_type ()")]
	public class LeafletPage : GLib.Object {
		[CCode (has_construct_function = false)]
		protected LeafletPage ();
		[Version (since = "1.0")]
		public unowned Gtk.Widget get_child ();
		[Version (since = "1.0")]
		public unowned string? get_name ();
		[Version (since = "1.0")]
		public bool get_navigatable ();
		[Version (since = "1.0")]
		public void set_name (string? name);
		[Version (since = "1.0")]
		public void set_navigatable (bool navigatable);
		public Gtk.Widget child { get; construct; }
		public string name { get; set; }
		[Version (since = "1.0")]
		public bool navigatable { get; set; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_preferences_group_get_type ()")]
	public class PreferencesGroup : Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "1.0")]
		public PreferencesGroup ();
		public void add (Gtk.Widget child);
		[Version (since = "1.0")]
		public unowned string get_description ();
		[Version (since = "1.0")]
		public unowned string get_title ();
		public void remove (Gtk.Widget child);
		[Version (since = "1.0")]
		public void set_description (string description);
		[Version (since = "1.0")]
		public void set_title (string title);
		[Version (since = "1.0")]
		public string description { get; set; }
		[Version (since = "1.0")]
		public string title { get; set; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_preferences_page_get_type ()")]
	public class PreferencesPage : Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "1.0")]
		public PreferencesPage ();
		public void add (Adw.PreferencesGroup group);
		[Version (since = "1.0")]
		public unowned string? get_icon_name ();
		[Version (since = "1.0")]
		public unowned string? get_title ();
		[Version (since = "1.0")]
		public bool get_use_underline ();
		public void remove (Adw.PreferencesGroup group);
		[Version (since = "1.0")]
		public void set_icon_name (string? icon_name);
		[Version (since = "1.0")]
		public void set_title (string? title);
		[Version (since = "1.0")]
		public void set_use_underline (bool use_underline);
		[Version (since = "1.0")]
		public string icon_name { get; set; }
		[Version (since = "1.0")]
		public string title { get; set; }
		[Version (since = "1.0")]
		public bool use_underline { get; set; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_preferences_row_get_type ()")]
	public class PreferencesRow : Gtk.ListBoxRow, Gtk.Accessible, Gtk.Actionable, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "1.0")]
		public PreferencesRow ();
		[Version (since = "1.0")]
		public unowned string? get_title ();
		[Version (since = "1.0")]
		public bool get_use_underline ();
		[Version (since = "1.0")]
		public void set_title (string? title);
		[Version (since = "1.0")]
		public void set_use_underline (bool use_underline);
		[Version (since = "1.0")]
		public string title { get; set; }
		[Version (since = "1.0")]
		public bool use_underline { get; set; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_preferences_window_get_type ()")]
	public class PreferencesWindow : Adw.Window, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Native, Gtk.Root, Gtk.ShortcutManager {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "1.0")]
		public PreferencesWindow ();
		public void add (Adw.PreferencesPage page);
		[Version (since = "1.0")]
		public void close_subpage ();
		[Version (since = "1.0")]
		public bool get_can_swipe_back ();
		[Version (since = "1.0")]
		public bool get_search_enabled ();
		[Version (since = "1.0")]
		public void present_subpage (Gtk.Widget subpage);
		public void remove (Adw.PreferencesPage page);
		[Version (since = "1.0")]
		public void set_can_swipe_back (bool can_swipe_back);
		[Version (since = "1.0")]
		public void set_search_enabled (bool search_enabled);
		[Version (since = "1.0")]
		public bool can_swipe_back { get; set; }
		[Version (since = "1.0")]
		public bool search_enabled { get; set; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_squeezer_get_type ()")]
	public class Squeezer : Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "1.0")]
		public Squeezer ();
		[Version (since = "1.0")]
		public unowned Adw.SqueezerPage add (Gtk.Widget child);
		[Version (since = "1.0")]
		public bool get_homogeneous ();
		[Version (since = "1.0")]
		public bool get_interpolate_size ();
		[Version (since = "1.0")]
		public unowned Adw.SqueezerPage get_page (Gtk.Widget child);
		[Version (since = "1.0")]
		public Gtk.SelectionModel get_pages ();
		[Version (since = "1.0")]
		public uint get_transition_duration ();
		[Version (since = "1.0")]
		public bool get_transition_running ();
		[Version (since = "1.0")]
		public Adw.SqueezerTransitionType get_transition_type ();
		[Version (since = "1.0")]
		public unowned Gtk.Widget? get_visible_child ();
		[Version (since = "1.0")]
		public float get_xalign ();
		[Version (since = "1.0")]
		public float get_yalign ();
		[Version (since = "1.0")]
		public void remove (Gtk.Widget child);
		[Version (since = "1.0")]
		public void set_homogeneous (bool homogeneous);
		[Version (since = "1.0")]
		public void set_interpolate_size (bool interpolate_size);
		[Version (since = "1.0")]
		public void set_transition_duration (uint duration);
		[Version (since = "1.0")]
		public void set_transition_type (Adw.SqueezerTransitionType transition);
		[Version (since = "1.0")]
		public void set_xalign (float xalign);
		[Version (since = "1.0")]
		public void set_yalign (float yalign);
		public bool homogeneous { get; set; }
		public bool interpolate_size { get; set; }
		public Gtk.SelectionModel pages { owned get; }
		public uint transition_duration { get; set; }
		public bool transition_running { get; }
		public Adw.SqueezerTransitionType transition_type { get; set; }
		public Gtk.Widget visible_child { get; }
		[Version (since = "1.0")]
		public float xalign { get; set; }
		[Version (since = "1.0")]
		public float yalign { get; set; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_squeezer_page_get_type ()")]
	public class SqueezerPage : GLib.Object {
		[CCode (has_construct_function = false)]
		protected SqueezerPage ();
		[Version (since = "1.0")]
		public unowned Gtk.Widget get_child ();
		[Version (since = "1.0")]
		public bool get_enabled ();
		[Version (since = "1.0")]
		public void set_enabled (bool enabled);
		public Gtk.Widget child { get; construct; }
		public bool enabled { get; set; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_status_page_get_type ()")]
	public class StatusPage : Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "1.0")]
		public StatusPage ();
		[Version (since = "1.0")]
		public unowned Gtk.Widget? get_child ();
		[Version (since = "1.0")]
		public unowned string? get_description ();
		[Version (since = "1.0")]
		public unowned string? get_icon_name ();
		[Version (since = "1.0")]
		public unowned string? get_title ();
		[Version (since = "1.0")]
		public void set_child (Gtk.Widget? child);
		[Version (since = "1.0")]
		public void set_description (string? description);
		[Version (since = "1.0")]
		public void set_icon_name (string? icon_name);
		[Version (since = "1.0")]
		public void set_title (string? title);
		public Gtk.Widget child { get; set; }
		[Version (since = "1.0")]
		public string description { get; set; }
		[Version (since = "1.0")]
		public string icon_name { get; set; }
		[Version (since = "1.0")]
		public string title { get; set; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_swipe_group_get_type ()")]
	public class SwipeGroup : GLib.Object, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		[Version (since = "1.0")]
		public SwipeGroup ();
		[Version (since = "1.0")]
		public void add_swipeable (Adw.Swipeable swipeable);
		[Version (since = "1.0")]
		public unowned GLib.SList<Adw.Swipeable> get_swipeables ();
		[Version (since = "1.0")]
		public void remove_swipeable (Adw.Swipeable swipeable);
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_swipe_tracker_get_type ()")]
	public class SwipeTracker : GLib.Object, Gtk.Orientable {
		[CCode (has_construct_function = false)]
		[Version (since = "1.0")]
		public SwipeTracker (Adw.Swipeable swipeable);
		[Version (since = "1.0")]
		public bool get_allow_long_swipes ();
		[Version (since = "1.0")]
		public bool get_allow_mouse_drag ();
		[Version (since = "1.0")]
		public bool get_enabled ();
		[Version (since = "1.0")]
		public bool get_reversed ();
		[Version (since = "1.0")]
		public unowned Adw.Swipeable get_swipeable ();
		[Version (since = "1.0")]
		public void set_allow_long_swipes (bool allow_long_swipes);
		[Version (since = "1.0")]
		public void set_allow_mouse_drag (bool allow_mouse_drag);
		[Version (since = "1.0")]
		public void set_enabled (bool enabled);
		[Version (since = "1.0")]
		public void set_reversed (bool reversed);
		[Version (since = "1.0")]
		public void shift_position (double delta);
		[Version (since = "1.0")]
		public bool allow_long_swipes { get; set; }
		[Version (since = "1.0")]
		public bool allow_mouse_drag { get; set; }
		[Version (since = "1.0")]
		public bool enabled { get; set; }
		[Version (since = "1.0")]
		public bool reversed { get; set; }
		[Version (since = "1.0")]
		public Adw.Swipeable swipeable { get; construct; }
		[Version (since = "1.0")]
		public signal void begin_swipe (Adw.NavigationDirection direction, bool direct);
		[Version (since = "1.0")]
		public signal void end_swipe (int64 duration, double to);
		[Version (since = "1.0")]
		public signal void update_swipe (double progress);
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_value_object_get_type ()")]
	public class ValueObject : GLib.Object {
		[CCode (has_construct_function = false)]
		[Version (since = "1.0")]
		public ValueObject (GLib.Value value);
		[Version (since = "1.0")]
		public void copy_value (GLib.Value dest);
		[Version (since = "1.0")]
		public string dup_string ();
		[Version (since = "1.0")]
		public unowned string get_string ();
		[Version (since = "1.0")]
		public unowned GLib.Value? get_value ();
		public GLib.Value value { get; construct; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_view_switcher_get_type ()")]
	public class ViewSwitcher : Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "1.0")]
		public ViewSwitcher ();
		[Version (since = "1.0")]
		public Pango.EllipsizeMode get_narrow_ellipsize ();
		[Version (since = "1.0")]
		public Adw.ViewSwitcherPolicy get_policy ();
		[Version (since = "1.0")]
		public unowned Gtk.Stack? get_stack ();
		[Version (since = "1.0")]
		public void set_narrow_ellipsize (Pango.EllipsizeMode mode);
		[Version (since = "1.0")]
		public void set_policy (Adw.ViewSwitcherPolicy policy);
		[Version (since = "1.0")]
		public void set_stack (Gtk.Stack? stack);
		[Version (since = "1.0")]
		public Pango.EllipsizeMode narrow_ellipsize { get; set; }
		[Version (since = "1.0")]
		public Adw.ViewSwitcherPolicy policy { get; set; }
		[Version (since = "1.0")]
		public Gtk.Stack stack { get; set; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_view_switcher_bar_get_type ()")]
	public class ViewSwitcherBar : Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "1.0")]
		public ViewSwitcherBar ();
		[Version (since = "1.0")]
		public Adw.ViewSwitcherPolicy get_policy ();
		[Version (since = "1.0")]
		public bool get_reveal ();
		[Version (since = "1.0")]
		public unowned Gtk.Stack? get_stack ();
		[Version (since = "1.0")]
		public void set_policy (Adw.ViewSwitcherPolicy policy);
		[Version (since = "1.0")]
		public void set_reveal (bool reveal);
		[Version (since = "1.0")]
		public void set_stack (Gtk.Stack? stack);
		[Version (since = "1.0")]
		public Adw.ViewSwitcherPolicy policy { get; set; }
		[Version (since = "1.0")]
		public bool reveal { get; set; }
		[Version (since = "1.0")]
		public Gtk.Stack stack { get; set; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_view_switcher_title_get_type ()")]
	public class ViewSwitcherTitle : Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "1.0")]
		public ViewSwitcherTitle ();
		[Version (since = "1.0")]
		public Adw.ViewSwitcherPolicy get_policy ();
		[Version (since = "1.0")]
		public unowned Gtk.Stack? get_stack ();
		[Version (since = "1.0")]
		public unowned string? get_subtitle ();
		[Version (since = "1.0")]
		public unowned string? get_title ();
		[Version (since = "1.0")]
		public bool get_title_visible ();
		[Version (since = "1.0")]
		public bool get_view_switcher_enabled ();
		[Version (since = "1.0")]
		public void set_policy (Adw.ViewSwitcherPolicy policy);
		[Version (since = "1.0")]
		public void set_stack (Gtk.Stack? stack);
		[Version (since = "1.0")]
		public void set_subtitle (string? subtitle);
		[Version (since = "1.0")]
		public void set_title (string? title);
		[Version (since = "1.0")]
		public void set_view_switcher_enabled (bool enabled);
		[Version (since = "1.0")]
		public Adw.ViewSwitcherPolicy policy { get; set; }
		[Version (since = "1.0")]
		public Gtk.Stack stack { get; set; }
		[Version (since = "1.0")]
		public string subtitle { get; set; }
		[Version (since = "1.0")]
		public string title { get; set; }
		[Version (since = "1.0")]
		public bool title_visible { get; }
		[Version (since = "1.0")]
		public bool view_switcher_enabled { get; set; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_window_get_type ()")]
	public class Window : Gtk.Window, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Native, Gtk.Root, Gtk.ShortcutManager {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "1.0")]
		public Window ();
		[Version (since = "1.0")]
		public unowned Gtk.Widget? get_child ();
		[Version (since = "1.0")]
		public void set_child (Gtk.Widget? child);
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_window_title_get_type ()")]
	public class WindowTitle : Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "1.0")]
		public WindowTitle (string? title, string? subtitle);
		[Version (since = "1.0")]
		public unowned string? get_subtitle ();
		[Version (since = "1.0")]
		public unowned string? get_title ();
		[Version (since = "1.0")]
		public void set_subtitle (string? subtitle);
		[Version (since = "1.0")]
		public void set_title (string? title);
		[Version (since = "1.0")]
		public string subtitle { get; set; }
		[Version (since = "1.0")]
		public string title { get; set; }
	}
	[CCode (cheader_filename = "adwaita.h", type_cname = "AdwSwipeableInterface", type_id = "adw_swipeable_get_type ()")]
	public interface Swipeable : Gtk.Widget {
		[Version (since = "1.0")]
		public void emit_child_switched (uint index, int64 duration);
		[Version (since = "1.0")]
		public abstract double get_cancel_progress ();
		[Version (since = "1.0")]
		public abstract double get_distance ();
		[Version (since = "1.0")]
		public abstract double get_progress ();
		[CCode (array_length_pos = 0.1)]
		[Version (since = "1.0")]
		public abstract double[] get_snap_points ();
		[Version (since = "1.0")]
		public abstract Gdk.Rectangle get_swipe_area (Adw.NavigationDirection navigation_direction, bool is_drag);
		[Version (since = "1.0")]
		public abstract unowned Adw.SwipeTracker get_swipe_tracker ();
		[Version (since = "1.0")]
		public abstract void switch_child (uint index, int64 duration);
		[Version (since = "1.0")]
		public signal void child_switched (uint index, int64 duration);
	}
	[CCode (cheader_filename = "adwaita.h", cprefix = "ADW_CENTERING_POLICY_", type_id = "adw_centering_policy_get_type ()")]
	[Version (since = "1.0")]
	public enum CenteringPolicy {
		LOOSE,
		STRICT
	}
	[CCode (cheader_filename = "adwaita.h", cprefix = "ADW_FLAP_FOLD_POLICY_", type_id = "adw_flap_fold_policy_get_type ()")]
	[Version (since = "1.0")]
	public enum FlapFoldPolicy {
		NEVER,
		ALWAYS,
		AUTO
	}
	[CCode (cheader_filename = "adwaita.h", cprefix = "ADW_FLAP_TRANSITION_TYPE_", type_id = "adw_flap_transition_type_get_type ()")]
	[Version (since = "1.0")]
	public enum FlapTransitionType {
		OVER,
		UNDER,
		SLIDE
	}
	[CCode (cheader_filename = "adwaita.h", cprefix = "ADW_LEAFLET_TRANSITION_TYPE_", type_id = "adw_leaflet_transition_type_get_type ()")]
	[Version (since = "1.0")]
	public enum LeafletTransitionType {
		OVER,
		UNDER,
		SLIDE
	}
	[CCode (cheader_filename = "adwaita.h", cprefix = "ADW_NAVIGATION_DIRECTION_", type_id = "adw_navigation_direction_get_type ()")]
	[Version (since = "1.0")]
	public enum NavigationDirection {
		BACK,
		FORWARD
	}
	[CCode (cheader_filename = "adwaita.h", cprefix = "ADW_SQUEEZER_TRANSITION_TYPE_", type_id = "adw_squeezer_transition_type_get_type ()")]
	[Version (since = "1.0")]
	public enum SqueezerTransitionType {
		NONE,
		CROSSFADE
	}
	[CCode (cheader_filename = "adwaita.h", cprefix = "ADW_VIEW_SWITCHER_POLICY_", type_id = "adw_view_switcher_policy_get_type ()")]
	public enum ViewSwitcherPolicy {
		AUTO,
		NARROW,
		WIDE
	}
	[CCode (cheader_filename = "adwaita.h", instance_pos = 1.9)]
	public delegate Gdk.Pixbuf? AvatarImageLoadFunc (int size);
	[CCode (cheader_filename = "adwaita.h")]
	[Version (since = "1.0")]
	public static double ease_out_cubic (double t);
	[CCode (cheader_filename = "adwaita.h")]
	[Version (since = "1.0")]
	public static bool get_enable_animations (Gtk.Widget widget);
	[CCode (cheader_filename = "adwaita.h")]
	[Version (since = "1.0")]
	public static void init ();
}
